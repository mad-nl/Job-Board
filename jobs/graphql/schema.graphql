scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    tags: [Tag!]! @all
    tag(slug: String! @eq): Tag @find

    jobs(
      orderBy: _ @orderBy(columns: ["pinned", "created_at"])
      hasTags: _ @whereHasConditions(columns: ["slug"])
    ): [Job!]! @all

    me: User @auth
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!

    jobs (
      id: ID @eq
      orderBy: _ @orderBy(columns: ["pinned", "created_at"])
    ): [Job!]! @hasMany
}

type Tag {
  id: ID!
  title: String!
  slug: String!
}

type Job {
  id: ID!
  job_title: String!
  job_location: String!
  job_link: String!
  highlighted: Boolean!
  pinned: Boolean!
  company_name: String!
  company_logo: String!
  created_at: DateTime!
  updated_at: DateTime!
  tags: [Tag!]! @belongsToMany
  user: User! @belongsTo
}

input CreateUserInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required", "email"])
    password: String @rules(apply: ["required", "min:5"]) @hash
}

input CreateUserBelongsTo {
    create: CreateUserInput
}

input CreateTagsBelongsToMany {
    connect: [ID!] @rulesForArray(apply: ["required"])
}

input UpdateTagsBelongsToMany {
    sync: [ID!] @rulesForArray(apply: ["required"])
}

input CreateJobInput {
    job_title: String @rules(apply: ["required"])
    job_location: String @rules(apply: ["required"])
    job_link: String @rules(apply: ["required", "url"])
    company_name: String @rules(apply: ["required"])
    company_logo: String @rules(apply: ["required", "url"])
    highlighted: Boolean @rules(apply: ["boolean"])
    pinned: Boolean @rules(apply: ["boolean"])
    user: CreateUserBelongsTo
    tags: CreateTagsBelongsToMany!
}

input UpdateJobInput {
    job_title: String @rules(apply: ["required"])
    job_location: String @rules(apply: ["required"])
    job_link: String @rules(apply: ["required", "url"])
    company_name: String @rules(apply: ["required"])
    company_logo: String @rules(apply: ["required", "url"])
    highlighted: Boolean @rules(apply: ["boolean"])
    pinned: Boolean @rules(apply: ["boolean"])
    tags: UpdateTagsBelongsToMany!
}

type Mutation {
  createJobAndRegisterUser(input: CreateJobInput! @spread): Job! @create

  createJob(input: CreateJobInput! @spread): Job!
    @guard
    @create
    @inject(context: "user.id", name: "user_id")

    updateJob(id: ID!, input: UpdateJobInput! @spread): Job! @update @can(ability: "update", find: "id")
}
